#SPDX-License-Identifier: LGPL-3.0-or-later
#building version number in variable _versionString

MACRO (GET_TORTOISE_GIT_WCREV PROJECT_GIT_STR)
	IF("${PROJECT_GIT_STR}" MATCHES "HEAD is ([a-zA-Z0-9]+)")
		STRING(SUBSTRING "${CMAKE_MATCH_1}" 0 7 GIT_VERSION)
	ENDIF()
ENDMACRO (GET_TORTOISE_GIT_WCREV)

MACRO(BuildVersionSVN)
	FIND_PACKAGE(Subversion QUIET)
	IF(Subversion_FOUND)
		SET(VERSION_FROM_SVN ON CACHE BOOL "Retrieve software version from Subversion")
		IF(VERSION_FROM_SVN)
			Subversion_WC_INFO(${PROJECT_SOURCE_DIR} project) #HACK: if not an svn tree, it does not work
			STRING(TIMESTAMP TODAY "%Y%m%d")
			SET(_versionString "${TODAY}.${project_WC_REVISION}")
		ELSE(VERSION_FROM_SVN)
			SET(_versionString "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
		ENDIF(VERSION_FROM_SVN)
	ELSE(Subversion_FOUND)
		SET(_versionString "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
	ENDIF(Subversion_FOUND)
ENDMACRO(BuildVersionSVN)

MACRO(BuildVersionGIT)
	FIND_PACKAGE(Git QUIET)
	IF(GIT_FOUND)
		MARK_AS_ADVANCED(GIT_EXECUTABLE)
		SET(VERSION_FROM_GIT ON CACHE BOOL "Retrieve software version from Git")
		IF(VERSION_FROM_GIT)
			execute_process(
				COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
				WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
				OUTPUT_VARIABLE project_WC_REVISION
				ERROR_QUIET
				OUTPUT_STRIP_TRAILING_WHITESPACE
			)
			STRING(TIMESTAMP TODAY "%Y%m%d")
			SET(_versionString "${TODAY}.${project_WC_REVISION}")
		ENDIF(VERSION_FROM_GIT)
	ELSE(GIT_FOUND)
		find_program(TORTOISE_WCREV gitWCRev HINTS $ENV{PATH} QUIET)
		if(TORTOISE_WCREV)
			MARK_AS_ADVANCED(TORTOISE_WCREV)
			SET(VERSION_FROM_GIT ON CACHE BOOL "Retrieve software version from Git")
			IF(VERSION_FROM_GIT)
				execute_process(
					COMMAND ${TORTOISE_WCREV} "${PROJECT_SOURCE_DIR}" 
					WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
					OUTPUT_VARIABLE project_WC_REVISION
					ERROR_QUIET
				)
				string(REPLACE "\\" "/" project_WC_REVISION "${project_WC_REVISION}")
				GET_TORTOISE_GIT_WCREV(${project_WC_REVISION})
				STRING(TIMESTAMP TODAY "%Y%m%d")
				SET(_versionString "${TODAY}.${GIT_VERSION}")
			ENDIF(VERSION_FROM_GIT)
		ENDIF(TORTOISE_WCREV)
	ENDIF(GIT_FOUND)
	
	IF(NOT _versionString)
		SET(_versionString "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
	ENDIF()
ENDMACRO(BuildVersionGIT)
